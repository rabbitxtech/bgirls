// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  username       String?   @unique 
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  favoriteIds    String[]  @db.ObjectId
  role           Role      @default(User)
  accounts       Account[]
  images         Image[]
  albums         Album[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

enum Role {
  User
  Admin
  Modifier
}

model Category {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  imageId String? @db.ObjectId
  albumId String? @db.ObjectId
  name    String  @unique
  image   Image?  @relation(fields: [imageId], references: [id])
  album   Album?  @relation(fields: [albumId], references: [id])
}

model Image {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  userId     String     @db.ObjectId
  categoryId String?    @db.ObjectId
  albumId    String?    @db.ObjectId
  src        String
  viewCount  Int
  createdAt  DateTime   @default(now())
  deletedBy  String     @db.ObjectId
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  album      Album?     @relation(fields: [albumId], references: [id])
  categories Category[]
}

model Album {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  userId      String     @db.ObjectId
  imageId     String[]   @db.ObjectId
  categoryId  String?    @db.ObjectId
  name        String
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  viewCount   Int
  totalImage  Int
  deletedBy   String     @db.ObjectId
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  image       Image[]
  categories  Category[]
}
